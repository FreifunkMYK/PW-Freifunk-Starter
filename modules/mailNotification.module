<?php

class mailNotification extends WireData implements Module, ConfigurableModule
{
    protected $mailAddress, $mailBody, $notificationSave, $notificationDelete, $notificationChange, $notificationTemplates;

    public static function getModuleInfo() {
        return array(
            'title' => __('Mail Notification'),
            'version' => '001',
            'author' => 'Kreativmonkey',
            'summary' => __('Notification mail by saving or deleting Pages'),
            'singular' => true,
            'autoload' => true
        );
    }

    public function ___install() {

    }

    public function init() {
        /*if (isset ($this->data ['mailAddress'])) {

        }

        if (isset ($this->data ['notificationSave'])){
          foreach ($this->data ['notificationSave'] as $x) {
            $template = $this->templates->get($x);
            $this->notificationSave->add($template);
          }
        }

        if (isset ($this->data ['notificatioDelete'])){
          foreach ($this->data ['notificatioDelete'] as $x) {
            $template = $this->templates->get($x);
            $this->notificatioDelete->add($template);
          }
        }

        if (isset ($this->data ['notificationChange'])){
          foreach ($this->data ['notificationChange'] as $x) {
            $template = $this->templates->get($x);
            $this->notificationChange->add($template);
          }
        }

        #$this->pages->addHookBefore("delete", $this, "ldapHelperDeleteUser");
        #$this->addHookAfter('Modules::saveModuleConfigData', $this, 'hookModuleSave');*/
        $this->addHookAfter('ProcessTemplate::buildEditForm', $this, 'hookBuildEditForm');
    }

    public function hookPageSave(){

    }
    public function hookPageDelete(){

    }
    public function hookPageChange(){

    }
    public function sendMail($message){

    }

    /**
     * Hook into the main form build for template edit
     * found in line 565 on /wire/modules/Process/ProcessTemplate/ProcessTemplate.module
     *
     */
    protected function hookBuildEditForm(HookEvent $event) {
      $process = $event->template;

      /*$t = new InputfieldWrapper();
  		$t->attr('title', $this->_x('Notification', 'tab'));
  		$t->attr('class', 'WireTab');
  		$this->buildEditFormNotification($template, $t);
  		$form->add($t);*/
    }

    /**
     *
     *
     */
    protected function buildEditFormNotification(Template $template, InputfieldWrapper $t){
      $form = new InputfieldWrapper();
  		$form->attr('id', 'urls');

  		// --------------------

  		$moreLabel = $this->_('More');

  		$field = $this->modules->get('InputfieldCheckbox');
  		$field->attr('id+name', 'allowPageNum');
  		$field->label = $this->_('Allow Page Numbers?');
  		$field->icon = 'list-ol';
  		$field->attr('value', 1);
  		if($template->allowPageNum) $field->attr('checked', 'checked');
  			else $field->collapsed = Inputfield::collapsedYes;
  		$field->description = $this->_('If checked, pages using this template will support pagination.');
  		$field->description .= " [$moreLabel](https://processwire.com/docs/admin/setup/templates/#allow-page-numbers)";
  		$field->columnWidth = 50;
  		//$field->notes = $this->_('Access the current page number from your template files with $input->pageNum.'); // Allow page numbers, API notes
  		$form->append($field);
  		if($template->allowPageNum) $form->collapsed = Inputfield::collapsedNo;

  		$field = $this->modules->get('InputfieldRadios');
  		$field->attr('id+name', 'slashPageNum');
  		$field->label = $this->_('Should page number URLs have a trailing slash?');
  		$field->icon = 'list-ol';
  		$field->addOption(1, $this->labels['Yes']);
  		$field->addOption(-1, $this->labels['No']);
  		$field->addOption(0, $this->labels['Either']);
  		$field->attr('value', (int) $template->slashPageNum);
  		$field->showIf = 'allowPageNum=1';
  		$field->columnWidth = 50;
  		$form->append($field);

  		// --------------------

  		$field = $this->modules->get('InputfieldCheckbox');
  		$field->attr('name', 'urlSegments');
  		$field->label = $this->_('Allow URL Segments?');
  		$field->icon = 'sitemap';
  		$field->columnWidth = 50;
  		$field->description = $this->_('If checked, pages using this template will support custom URL segments after the page URL.') . ' ';
  		$field->description .= "[$moreLabel](https://processwire.com/docs/admin/setup/templates/#allow-url-segments)";
  		//$field->notes = $this->_('Access the current URL segment(s) from your template files with $input->urlSegmentStr.'); // Allow page numbers, API notes
  		//$field->notes .= " [$moreLabel](https://processwire.com/docs/admin/setup/templates/#accessing-url-segments-from-the-api)";

  		$field->attr('value', 1);
  		$urlSegments = $template->urlSegments();
  		if($urlSegments) {
  			$field->attr('checked', 'checked');
  			$form->collapsed = Inputfield::collapsedNo;
  		} else {
  			$field->collapsed = Inputfield::collapsedYes;
  		}
  		$form->append($field);

  		$field = $this->modules->get('InputfieldRadios');
  		$field->attr('id+name', 'slashUrlSegments');
  		$field->label = $this->_('Should URL segments end with a trailing slash?');
  		$field->icon = 'sitemap';
  		$field->addOption(1, $this->labels['Yes']);
  		$field->addOption(-1, $this->labels['No']);
  		$field->addOption(0, $this->labels['Either']);
  		$field->attr('value', (int) $template->slashUrlSegments);
  		$field->showIf = 'urlSegments=1';
  		$field->columnWidth = 50;
  		$form->append($field);

  		$field = $this->modules->get('InputfieldTextarea');
  		$field->attr('name', 'urlSegmentsList');
  		$field->label = $this->_('Which URL segments do you want to allow?');
  		$field->description = $this->_('Enter one allowed segment, segment path or regular expression per line, or leave blank to allow any.'); // Description for allow URL segments
  		$field->description .= " [$moreLabel](https://processwire.com/docs/admin/setup/templates/#which-url-segments-do-you-want-to-allow)";
  		$field->icon = 'sitemap';
  		if(is_array($urlSegments)) $field->attr('value', implode("\n", $urlSegments));
  		$field->showIf = 'urlSegments=1';
  		$field->collapsed = Inputfield::collapsedBlank;
  		$form->append($field);

  		// --------------------

  		$field = $this->modules->get('InputfieldRadios');
  		$field->attr('name', 'slashUrls');
  		$field->label = $this->_('Should page URLs end with a slash?');
  		$field->addOption(1, $this->labels['Yes']);
  		if($template->name != 'admin') $field->addOption(0, $this->labels['No']);
  		$field->description = $this->_("If 'Yes', pages using this template will always have URLs that end with a trailing slash '/'. And if the page is loaded from a URL without the slash, it will be redirected to it. If you select 'No', the non-slashed version will be enforced instead. Note that this setting does not enforce this behavior on URL segments or page numbers, only actual page URLs. If you don't have a preference, it is recommended that you leave this set to 'Yes'."); // URLs end with slash, description
  		$field->attr('value', $template->slashUrls === 0 ? 0 : 1); // force default setting of 1
  		$field->collapsed = $template->slashUrls === 0 ? Inputfield::collapsedNo : Inputfield::collapsedYes;
  		if($template->slashUrls === 0) $form->collapsed = Inputfield::collapsedNo;
  		$form->append($field);

  		// --------------------

  		$field = $this->modules->get('InputfieldRadios');
  		$field->attr('name', 'https');
  		$field->label = $this->_('Scheme/Protocol');
  		$field->addOption(0, $this->_('HTTP or HTTPS'));
  		$field->addOption(1, $this->_('HTTPS only (SSL encrypted)'));
  		$field->addOption(-1, $this->_('HTTP only'));
  		$field->collapsed = Inputfield::collapsedBlank;
  		$field->description = $this->_("If your site has an SSL certificate and is accessible by HTTPS, you may make pages using this template accessible only via HTTPS or HTTP. For example, if you select 'HTTPS only' below, and a request for a page using this template comes in through HTTP, it will be automatically redirected to the HTTPS version. By default, ProcessWire allows connection from either HTTP or HTTPS."); // Scheme/Protocol, description
  		$field->attr('value', (int) $template->https);
  		$form->append($field);
  		if($template->https) $form->collapsed = Inputfield::collapsedNo;

  		return $form;
    }

    /**
  	 * Save the template and check to see if a Fieldgroup change was requested
  	 *
  	 */
  	protected function ___executeSave() {
    }

    public function hookModuleSave(HookEvent $event) {
       $className = $event->arguments [0];
       if ($className != get_class($this)) return;
       $this->validateConfiguration();
     }

    static public function getModuleConfigInputfields(array $data) {
        $inputfields = new InputfieldWrapper ();

        $mailAddressField = wire('modules')->get('InputfieldText');
        $mailAddressField->name = 'mailAddress';
        $mailAddressField->columnWidth = 80;
        $mailAddressField->label = __('Mail Addresses');
        $mailAddressField->required = 1;
        if (isset ($data ['mailAddress']))
            $mailAddressField->value = $data ['mailAddress'];
        $mailAddressField->description = __('Mailaddresses like mail@domain.tdl or a username ore user groupe. You can choose more than one address by comma separet.');
        $inputfields->add($mailAddressField);

        $useSSLField = wire('modules')->get('InputfieldCheckbox');
        $useSSLField->name = 'useSSL';
        $useSSLField->columnWidth = 20;
        $useSSLField->label = __('Use SSL?');
        $useSSLField->description = __('Connects to the LDAP Server via SSL.');
        if (isset ($data ['useSSL']) && $data ['useSSL'] == 1)
            $useSSLField->checked = 1;
        $inputfields->add($useSSLField);

        $useV3Field = wire('modules')->get('InputfieldCheckbox');
        $useV3Field->name = 'useV3';
        $useV3Field->columnWidth = 20;
        $useV3Field->label = __('Use Protocol V3?');
        $useV3Field->description = __('Use LDAP Protocol V3.');
        if (isset ($data ['useV3']) && $data ['useV3'] == 1)
            $useV3Field->checked = 1;
        $inputfields->add($useV3Field);

        $defaultLoginDomainField = wire('modules')->get('InputfieldText');
        $defaultLoginDomainField->name = 'loginDomain';
        $defaultLoginDomainField->label = __('Default Login Domain');
        $defaultLoginDomainField->required = 1;
        if (isset ($data ['loginDomain']))
            $defaultLoginDomainField->value = $data ['loginDomain'];
        $defaultLoginDomainField->description = __('This is the domain name used by default if the user does not supply a domain name. It will be added to the username, e.g. username@domainname.com');
        $inputfields->add($defaultLoginDomainField);

        $adminLoginField = wire('modules')->get('InputfieldText');
        $adminLoginField->name = 'admin';
        $adminLoginField->columnWidth = 50;
        $adminLoginField->label = __('LDAP Admin');
        $adminLoginField->required = 1;
        if (isset ($data ['admin']))
            $adminLoginField->value = $data ['admin'];
        $adminLoginField->description = __('An LDAP account with access to add/edit/delet users.');
        $inputfields->add($adminLoginField);

        $secretField = wire('modules')->get('InputfieldText');
        $secretField->attr ('type','password');
        $secretField->name = 'secret';
        $secretField->columnWidth = 50;
        $secretField->label = __('LDAP Admin Secret');
        $secretField->description = __('Needet to use with LDAP Admin to add/edit/delete users.');
        if (isset ($data ['secret']))
            $secretField->value = $data ['secret'];
        $inputfields->add($secretField);

        $notificationSaveField = wire('modules')->get('InputfieldPageListSelectMultiple');
        $notificationSaveField->name = 'notificationSave';
        $notificationSaveField->label = __('Notification Save');
        $notificationSaveField->description = __('All templates you would like to get notification by saving pages.');
        $notificationSaveField->parent_id = wire('templates');
        if (isset ($data ['notificationSave']))
            $notificationSaveField->value = $data ['notificationSave'];
        $inputfields->add($notificationSaveField);

        $debugField = wire('modules')->get('InputfieldCheckbox');
        $debugField->name = 'debug';
        $debugField->collapsed = Inputfield::collapsedYes;
        $debugField->label = __('Debug Mode');
        $debugField->description = __('Turns on the debug mode so you can see the output of PHP\'s ldap module in the apache log.');
        if (isset ($data ['debug']) && $data ['debug'] == 1)
            $debugField->checked = 1;
        $inputfields->add($debugField);

        return $inputfields;
    }
}
