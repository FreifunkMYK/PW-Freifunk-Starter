<?php

class ffRouterFirmware extends WireData implements Module, ConfigurableModule{
    protected $cache = false;
    protected $cache_firmware = array();
    protected $cache_hardware = array();
    protected $cache_vendor = array();
    protected $src, $firmware;
    protected $cache_file = "routerFirmwareCache.json";

    public static function getModuleInfo() {
        return array(
            'title' => __('Freifunk Router Manager'),
            'version' => '001',
            'author' => 'Kreativmonkey',
            'summary' => __('Manage Router for the Webpage.'),
            'singular' => true,
            'autoload' => true
        );
    }

    public function ___install() {
      // Creating fields and templates for the Node manegemant
    }

    public function init() {
      if (isset ($this->data ['src']))
          $this->src = $this->data ['src'];

      $this->cache_data();
      // run the module every 2 minutes
      //$this->addHook('LazyCron::every2Minutes', $this, 'set_nodeinfo');
    }

    protected function cache_data() {

      if (file_exists($this->cache_file) && (filemtime($this->cache_file) > (time() - 60 * 10 ))) {
         // Cache file is less than five minutes old.
         // Don't bother refreshing, just use the file as-is.
         $this->cache = json_decode(file_get_contents($this->cache_file));
         $this->cache_vendor = (array)$this->cache->vendor;
         $this->cache_hardware = (array)$this->cache->hardware;
         $this->cache_firmware = (array)$this->cache->firmware;
         $this->cache = false;
      } else {
         // Our cache is out-of-date, so load the data from our remote server,
         // and also save it over our cache for next time.
         $htmlcache = file_get_contents($this->src);
         $this->cache = json_decode($htmlcache);
         $this->gen_cache();
         file_put_contents($this->cache_file, json_encode($this->cache), LOCK_EX);
         $this->cache = false;
      }
    }

    /**
     * Create the cache to minimize the api requests.
     *
     * TODO!!
     */
    protected function gen_cache() {
        foreach($this->cache as $key => $value) {
            // generate vendor list
            if(!array_key_exists($value->vendor, $this->cache_vendor)) $this->cache_vendor[$value->vendor] = array();
            if(!in_array($value->hardware, $this->cache_vendor[$value->vendor])) array_push($this->cache_vendor[$value->vendor], $value->hardware);

            // generate hardware list
            if(!array_key_exists($value->hardware, $this->cache_hardware)) $this->cache_hardware[$value->hardware] = array();
            if(!in_array($key, $this->cache_hardware[$value->hardware])) array_push($this->cache_hardware[$value->hardware], $key);

            // generate firmware list
            $this->cache_firmware[$key] = $value;
        }
        $this->cache = array();
        $this->cache["vendor"] = $this->cache_vendor;
        $this->cache["hardware"] = $this->cache_hardware;
        $this->cache["firmware"] = $this->cache_firmware;
    }

    /**
     * Function to return Firmwarelist for the router
     *
     * @param  [type] $router [description]
     * @return [type]         [description]
     */
    public function get_firmware($router) {
      $router = $this->get_Page($router);
      $vendor = strtolower($router->parent->title);
      $model = strtolower($router->title);
      $firmware_list = array();

      if(!array_key_exists($model, $this->cache_hardware)) return $firmware_list;
      foreach($this->cache_hardware[$model] as $filepath) {
        $firmware_list[$filepath] = $this->cache_firmware[$filepath];
      }

      return $firmware_list;
    }


    public function list_hardware() {
      return $this->cache_vendor;
    }

    /**
     * Helper function to get wire Page
     * @param  [string ore page] $router [String ore wire Page]
     * @return [Page]         [Returne a wire page or NullPage]
     */
    private function get_page($router) {
      if($router instanceof Page){
        return $router;
      }

      return wire('pages')->get("title=$router");
    }

    public function hookModuleSave(HookEvent $event) {
       $className = $event->arguments [0];
       if ($className != get_class($this)) return;
       $this->validateConfiguration();
     }

    static public function getModuleConfigInputfields(array $data) {
        $inputfields = new InputfieldWrapper ();

        $srcField = wire('modules')->get('InputfieldText');
        $srcField->name = 'src';
        $srcField->columnWidth = 100;
        $srcField->label = __('JSON URL');
        $srcField->required = 1;
        if (isset ($data ['src']))
            $srcField->value = $data ['src'];
        $srcField->description = __('The URL to the JSON file with all node data.');
        $inputfields->add($srcField);

        return $inputfields;
    }
}
